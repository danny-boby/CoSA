VAR
clk1: BV(1);
clk2: BV(1);
rst: BV(1);
init1: BV(8);
init2: BV(8);
counter_1: Counter(clk1, rst, init1);
counter_2: Counter(clk2, rst, init2);
adder: Adder(counter_1.output, counter_2.output);
output: BV(8);

INIT
clk1 = 0_1;
clk2 = 1_1;

TRANS
# Clock Behavior
(clk1 = 0_1) <-> (next(clk1) = 1_1);
(clk2 = 0_1) <-> (next(clk2) = 1_1);

# We reset when output > 16
((output > 16_8) -> ((rst = 0_1) & (next(rst) = 1_1)));

# We allow a reset only when output > 1
(rst = 0_1) & (next(rst) = 1_1) -> (output > 1_8);

INVAR
output = adder.output;
init1 = 0_8;
init2 = 3_8;

DEF Adder(in1: BV(8), in2: BV(8)):
  VAR
  output: BV(8);

  INVAR
  output = (in1 + in2);
  
DEF Counter(clk: BV(1), rst: BV(1), initval: BV(8)):
  VAR
  output: BV(8);

  INIT
  output = 0_8;

  TRANS
  # When posedge and not reset we increase the output by 1
  (((clk = 0_1) & (next(clk) = 1_1)) & !((next(rst) = 1_1) & (rst = 0_1))) -> (next(output) = (output + 1_8));
  # When negedge and not reset we keep the value of the output
  (((clk = 1_1) & (next(clk) = 0_1)) & !((next(rst) = 1_1) & (rst = 0_1))) -> (next(output) = (output));
  # When reset we set output to initval
  ((rst = 0_1) & (next(rst) = 1_1)) -> (next(output) = initval);
